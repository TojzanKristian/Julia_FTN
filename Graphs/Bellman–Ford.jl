# BELLMAN-FORD ALGORITHM

# single-source shortest path algorithm
# algoritam najkraƒáe putanje sa jednim izvorom
# egy csom√≥bol indul√≥ legr√∂videbb √∫tvonalat meghat√°roz√≥ algoritmus

# the time complexity: ùëÇ(ùëâ*ùê∏)
# vremenska slo≈æenost: ùëÇ(ùëâ*ùê∏)
# az id≈ë √∂sszetetts√©ge: ùëÇ(ùëâ*ùê∏)

# initialization of the initial node from which the algorithm star
# inicijalizacija poƒçetnog ƒçvora iz kojeg algoritam kreƒáe
# az els≈ë csom√≥ meghat√°roz√°sa ahonnan az algoritmus elindul
function initializationSource!(G, s)
    for u in values(g.V)
        u.color = WHITE;
        u.distance = Inf;
        u.previous = nothing;
    end
    s.distance = 0;
end

# edge relaxation
# relaksacija - a≈æuriranje tro≈°kova izmeƒëu ƒçvorova
# relax√°ci√≥ - a csom√≥pontok k√∂z√∂tti k√∂lts√©gek friss√≠t√©se
function relaxation!(G, u, v)
    w = Weight(G, u, v)
    if v.distance > u.distance + w
        v.distance = u.distance + w;
        v.previous = u;
        return true;
    end
    return false;
end

# algorithm implementation  implementacija (implement√°ci√≥):
function BellmanFord!(G, skey::Int32)
    initializationSource!(G, G.V[skey])
    for i = 1 : length(G.V)-1
        for u in values(G.V)
            for v in u.neighbors
                relaxation!(G, u, v)
            end
        end
    end
    for u in values(G.V)
        for v in u.neighbors
            if relaxation!(G, u, v)
                return false;
            end
        end
    end
    return true;
end